# The command to run, usually a shell. If this is not an absolute path, it'll
# be looked up in the `PATH`. If this is not set, a default will be looked up
# from your system. The rules for the default lookup are:
#
#   * `SHELL` environment variable
#
#   * `passwd` entry (user information)
#
# This can contain additional arguments to run the command with. If additional
# arguments are provided, the command will be executed using `/bin/sh -c`.
# Ghostty does not do any shell command parsing.
#
# If you're using the `ghostty` CLI there is also a shortcut to run a command
# with arguments directly: you can use the `-e` flag. For example: `ghostty -e
# fish --with --custom --args`.
# command = /usr/bin/env "COLORSCHEME=${COLORSCHEME:-lavi}" zsh
# command = zsh -c 'tmux new-session -e "COLORSCHEME=${COLORSCHEME:-lavi}"'
# command = zsh
command = nu
# command = bash

# The font families to use.
#
# You can generate the list of valid values using the CLI:
#
#     ghostty +list-fonts
#
# This configuration can be repeated multiple times to specify preferred
# fallback fonts when the requested codepoint is not available in the primary
# font. This is particularly useful for multiple languages, symbolic fonts,
# etc.
#
# If you want to overwrite a previous set value rather than append a fallback,
# specify the value as `""` (empty string) to reset the list and then set the
# new values. For example:
#
#     font-family = ""
#     font-family = "My Favorite Font"
#
# Changing this configuration at runtime will only affect new terminals, i.e.
# new windows, tabs, etc.
# font-family = IosevkaTerm Nerd Font Mono
# font-family-bold = IosevkaTerm Nerd Font Mono
# font-family-italic = IosevkaTerm Nerd Font Mono
# font-family-bold-italic = Iosevka Term Slab
font-family = Pragmasevka Nerd Font

# The named font style to use for each of the requested terminal font styles.
# This looks up the style based on the font style string advertised by the
# font itself. For example, "Iosevka Heavy" has a style of "Heavy".
#
# You can also use these fields to completely disable a font style. If you set
# the value of the configuration below to literal `false` then that font style
# will be disabled. If the running program in the terminal requests a disabled
# font style, the regular font style will be used instead.
#
# These are only valid if its corresponding font-family is also specified. If
# no font-family is specified, then the font-style is ignored unless you're
# disabling the font style.
font-style = default
font-style-bold = default
font-style-italic = default
font-style-bold-italic = default

# Apply a font feature. This can be repeated multiple times to enable multiple
# font features. You can NOT set multiple font features with a single value
# (yet).
#
# The font feature will apply to all fonts rendered by Ghostty. A future
# enhancement will allow targeting specific faces.
#
# A valid value is the name of a feature. Prefix the feature with a `-` to
# explicitly disable it. Example: `ss20` or `-ss20`.
#
# To disable programming ligatures, use `-calt` since this is the typical
# feature name for programming ligatures. To look into what font features
# your font has and what they do, use a font inspection tool such as
# [fontdrop.info](https://fontdrop.info).
#
# To generally disable most ligatures, use `-calt`, `-liga`, and `-dlig` (as
# separate repetitive entries in your config).
font-feature =

# Font size in points. This value can be a non-integer and the nearest integer
# pixel size will be selected. If you have a high dpi display where 1pt = 2px
# then you can get an odd numbered pixel size by specifying a half point.
#
# For example, 13.5pt @ 2px/pt = 27px
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc. Note that you may still not see the change
# depending on your `window-inherit-font-size` setting. If that setting is
# true, only the first window will be affected by this change since all
# subsequent windows will inherit the font size of the previous window.
font-size = 12

# A repeatable configuration to set one or more font variations values for
# a variable font. A variable font is a single font, usually with a filename
# ending in `-VF.ttf` or `-VF.otf` that contains one or more configurable axes
# for things such as weight, slant, etc. Not all fonts support variations;
# only fonts that explicitly state they are variable fonts will work.
#
# The format of this is `id=value` where `id` is the axis identifier. An axis
# identifier is always a 4 character string, such as `wght`. To get the list
# of supported axes, look at your font documentation or use a font inspection
# tool.
#
# Invalid ids and values are usually ignored. For example, if a font only
# supports weights from 100 to 700, setting `wght=800` will do nothing (it
# will not be clamped to 700). You must consult your font's documentation to
# see what values are supported.
#
# Common axes are: `wght` (weight), `slnt` (slant), `ital` (italic), `opsz`
# (optical size), `wdth` (width), `GRAD` (gradient), etc.
font-variation =

font-variation-bold =
font-variation-italic =
font-variation-bold-italic =

# Force one or a range of Unicode codepoints to map to a specific named font.
# This is useful if you want to support special symbols or if you want to use
# specific glyphs that render better for your specific font.
#
# The syntax is `codepoint=fontname` where `codepoint` is either a single
# codepoint or a range. Codepoints must be specified as full Unicode
# hex values, such as `U+ABCD`. Codepoints ranges are specified as
# `U+ABCD-U+DEFG`. You can specify multiple ranges for the same font separated
# by commas, such as `U+ABCD-U+DEFG,U+1234-U+5678=fontname`. The font name is
# the same value as you would use for `font-family`.
#
# This configuration can be repeated multiple times to specify multiple
# codepoint mappings.
#
# Changing this configuration at runtime will only affect new terminals,
# i.e. new windows, tabs, etc.
font-codepoint-map =

# Draw fonts with a thicker stroke, if supported. This is only supported
# currently on MacOS.
font-thicken = false

# All of the configurations behavior adjust various metrics determined by the
# font. The values can be integers (1, -1, etc.) or a percentage (20%, -15%,
# etc.). In each case, the values represent the amount to change the original
# value.
#
# For example, a value of `1` increases the value by 1; it does not set it to
# literally 1. A value of `20%` increases the value by 20%. And so on.
#
# There is little to no validation on these values so the wrong values (i.e.
# `-100%`) can cause the terminal to be unusable. Use with caution and reason.
#
# Some values are clamped to minimum or maximum values. This can make it
# appear that certain values are ignored. For example, the underline position
# is clamped to the height of a cell. If you set the underline position so
# high that it extends beyond the bottom of the cell size, it will be clamped
# to the bottom of the cell.
#
# `adjust-cell-height` has some additional behaviors to describe:
#
#   * The font will be centered vertically in the cell.
#
#   * The cursor will remain the same size as the font.
#
#   * Powerline glyphs will be adjusted along with the cell height so
#     that things like status lines continue to look aligned.
adjust-cell-width =

adjust-cell-height =
adjust-font-baseline =
adjust-underline-position =
adjust-underline-thickness =
adjust-strikethrough-position =
adjust-strikethrough-thickness =
adjust-cursor-thickness =

# The method to use for calculating the cell width of a grapheme cluster.
# The default value is `unicode` which uses the Unicode standard to determine
# grapheme width. This results in correct grapheme width but may result in
# cursor-desync issues with some programs (such as shells) that may use a
# legacy method such as `wcswidth`.
#
# Valid values are:
#
#   * `legacy` - Use a legacy method to determine grapheme width, such as
#     wcswidth This maximizes compatibility with legacy programs but may result
#     in incorrect grapheme width for certain graphemes such as skin-tone
#     emoji, non-English characters, etc.
#
#     This is called "legacy" and not something more specific because the
#     behavior is undefined and we want to retain the ability to modify it.
#     For example, we may or may not use libc `wcswidth` now or in the future.
#
#   * `unicode` - Use the Unicode standard to determine grapheme width.
#
# If a running program explicitly enables terminal mode 2027, then `unicode`
# width will be forced regardless of this configuration. When mode 2027 is
# reset, this configuration will be used again.
#
# This configuration can be changed at runtime but will not affect existing
# terminals. Only new terminals will use the new configuration.
grapheme-width-method = unicode

# A theme to use. If the theme is an absolute pathname, Ghostty will attempt
# to load that file as a theme. If that file does not exist or is inaccessible,
# an error will be logged and no other directories will be searched.
#
# If the theme is not an absolute pathname, two different directories will be
# searched for a file name that matches the theme. This is case sensitive on
# systems with case-sensitive filesystems. It is an error for a theme name to
# include path separators unless it is an absolute pathname.
#
# The first directory is the `themes` subdirectory of your Ghostty
# configuration directory. This is `$XDG_CONFIG_DIR/ghostty/themes` or
# `~/.config/ghostty/themes`.
#
# The second directory is the `themes` subdirectory of the Ghostty resources
# directory. Ghostty ships with a multitude of themes that will be installed
# into this directory. On macOS, this list is in the `Ghostty.app/Contents/
# Resources/ghostty/themes` directory. On Linux, this list is in the `share/
# ghostty/themes` directory (wherever you installed the Ghostty "share"
# directory.
#
# To see a list of available themes, run `ghostty +list-themes`.
#
# Any additional colors specified via background, foreground, palette, etc.
# will override the colors specified in the theme.
# theme = rose-pine-dawn
theme = lavi

# Swap the foreground and background colors of cells for selection. This
# option overrides the `selection-foreground` and `selection-background`
# options.
#
# If you select across cells with differing foregrounds and backgrounds, the
# selection color will vary across the selection.
selection-invert-fg-bg = false

# The minimum contrast ratio between the foreground and background colors.
# The contrast ratio is a value between 1 and 21. A value of 1 allows for no
# contrast (i.e. black on black). This value is the contrast ratio as defined
# by the [WCAG 2.0 specification](https://www.w3.org/TR/WCAG20/).
#
# If you want to avoid invisible text (same color as background), a value of
# 1.1 is a good value. If you want to avoid text that is difficult to read, a
# value of 3 or higher is a good value. The higher the value, the more likely
# that text will become black or white.
#
# This value does not apply to Emoji or images.
minimum-contrast = 1.0

# The opacity level (opposite of transparency) of the cursor. A value of 1
# is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value. Note that a
# sufficiently small value such as 0.3 may be effectively invisible and may
# make it difficult to find the cursor.
cursor-opacity = 1

# The style of the cursor. This sets the default style. A running programn can
# still request an explicit cursor style using escape sequences (such as `CSI
# q`). Shell configurations will often request specific cursor styles.
#
# Note that shell integration will automatically set the cursor to a bar at
# a prompt, regardless of this configuration. You can disable that behavior
# by specifying `shell-integration-features = no-cursor` or disabling shell
# integration entirely.
cursor-style = block

# Sets the default blinking state of the cursor. This is just the default
# state; running programs may override the cursor style using `DECSCUSR` (`CSI
# q`).
#
# If this is not set, the cursor blinks by default. Note that this is not the
# same as a "true" value, as noted below.
#
# If this is not set at all (`null`), then Ghostty will respect DEC Mode 12
# (AT&T cursor blink) as an alternate approach to turning blinking on/off. If
# this is set to any value other than null, DEC mode 12 will be ignored but
# `DECSCUSR` will still be respected.
cursor-style-blink = true

# The color of the text under the cursor. If this is not set, a default will
# be chosen.
cursor-text =

# Enables the ability to move the cursor at prompts by using `alt+click` on
# Linux and `option+click` on macOS.
#
# This feature requires shell integration (specifically prompt marking
# via `OSC 133`) and only works in primary screen mode. Alternate screen
# applications like vim usually have their own version of this feature but
# this configuration doesn't control that.
#
# It should be noted that this feature works by translating your desired
# position into a series of synthetic arrow key movements, so some weird
# behavior around edge cases are to be expected. This is unfortunately how
# this feature is implemented across terminals because there isn't any other
# way to implement it.
cursor-click-to-move = true

# Hide the mouse immediately when typing. The mouse becomes visible again when
# the mouse is used. The mouse is only hidden if the mouse cursor is over the
# active terminal surface.
mouse-hide-while-typing = false

# Determines whether running programs can detect the shift key pressed with a
# mouse click. Typically, the shift key is used to extend mouse selection.
#
# The default value of `false` means that the shift key is not sent with
# the mouse protocol and will extend the selection. This value can be
# conditionally overridden by the running program with the `XTSHIFTESCAPE`
# sequence.
#
# The value `true` means that the shift key is sent with the mouse protocol
# but the running program can override this behavior with `XTSHIFTESCAPE`.
#
# The value `never` is the same as `false` but the running program cannot
# override this behavior with `XTSHIFTESCAPE`. The value `always` is the
# same as `true` but the running program cannot override this behavior with
# `XTSHIFTESCAPE`.
#
# If you always want shift to extend mouse selection even if the program
# requests otherwise, set this to `never`.
mouse-shift-capture = false

# Multiplier for scrolling distance with the mouse wheel. Any value less
# than 0.01 or greater than 10,000 will be clamped to the nearest valid
# value.
#
# A value of "1" (default) scrolls te default amount. A value of "2" scrolls
# double the default amount. A value of "0.5" scrolls half the default amount.
# Et cetera.
mouse-scroll-multiplier = 1

# The opacity level (opposite of transparency) of the background. A value of
# 1 is fully opaque and a value of 0 is fully transparent. A value less than 0
# or greater than 1 will be clamped to the nearest valid value.
background-opacity = 1

# A positive value enables blurring of the background when background-opacity
# is less than 1. The value is the blur radius to apply. A value of 20
# is reasonable for a good looking blur. Higher values will cause strange
# rendering issues as well as performance issues.
#
# This is only supported on macOS.
background-blur-radius = 0

# The opacity level (opposite of transparency) of an unfocused split.
# Unfocused splits by default are slightly faded out to make it easier to see
# which split is focused. To disable this feature, set this value to 1.
#
# A value of 1 is fully opaque and a value of 0 is fully transparent. Because
# "0" is not useful (it makes the window look very weird), the minimum value
# is 0.15. This value still looks weird but you can at least see what's going
# on. A value outside of the range 0.15 to 1 will be clamped to the nearest
# valid value.
unfocused-split-opacity = 0.7

unfocused-split-fill =

# If true, keep the terminal open after the command exits. Normally, the
# terminal window closes when the running command (such as a shell) exits.
# With this true, the terminal window will stay open until any keypress is
# received.
#
# This is primarily useful for scripts or debugging.
wait-after-command = false

# The number of milliseconds of runtime below which we consider a process exit
# to be abnormal. This is used to show an error message when the process exits
# too quickly.
#
# On Linux, this must be paired with a non-zero exit code. On macOS, we allow
# any exit code because of the way shell processes are launched via the login
# command.
abnormal-command-exit-runtime = 250

# The size of the scrollback buffer in bytes. This also includes the active
# screen. No matter what this is set to, enough memory will always be
# allocated for the visible screen and anything leftover is the limit for
# the scrollback.
#
# When this limit is reached, the oldest lines are removed from the
# scrollback.
#
# Scrollback currently exists completely in memory. This means that the
# larger this value, the larger potential memory usage. Scrollback is
# allocated lazily up to this limit, so if you set this to a very large
# value, it will not immediately consume a lot of memory.
#
# This size is per terminal surface, not for the entire application.
#
# It is not currently possible to set an unlimited scrollback buffer.
# This is a future planned feature.
#
# This can be changed at runtime but will only affect new terminal surfaces.
scrollback-limit = 10000000

# Match a regular expression against the terminal text and associate clicking
# it with an action. This can be used to match URLs, file paths, etc. Actions
# can be opening using the system opener (i.e. `open` or `xdg-open`) or
# executing any arbitrary binding action.
#
# Links that are configured earlier take precedence over links that are
# configured later.
#
# A default link that matches a URL and opens it in the system opener always
# exists. This can be disabled using `link-url`.
#
# TODO: This can't currently be set!

# Enable URL matching. URLs are matched on hover with control (Linux) or
# super (macOS) pressed and open using the default system application for
# the linked URL.
#
# The URL matcher is always lowest priority of any configured links (see
# `link`). If you want to customize URL matching, use `link` and disable this.
link-url = true

# Start new windows in fullscreen. This setting applies to new windows and
# does not apply to tabs, splits, etc. However, this setting will apply to all
# new windows, not just the first one.
#
# On macOS, this always creates the window in native fullscreen. Non-native
# fullscreen is not currently supported with this setting.
#
# On macOS, this setting does not work if window-decoration is set to
# "false", because native fullscreen on macOS requires window decorations
# to be set.
fullscreen = false

# The title Ghostty will use for the window. This will force the title of the
# window to be this title at all times and Ghostty will ignore any set title
# escape sequences programs (such as Neovim) may send.
title =

# The setting that will change the application class value.
#
# This controls the class field of the `WM_CLASS` X11 property (when running
# under X11), and the Wayland application ID (when running under Wayland).
#
# Note that changing this value between invocations will create new, separate
# instances, of Ghostty when running with `gtk-single-instance=true`. See that
# option for more details.
#
# The class name must follow the requirements defined [in the GTK
# documentation](https://docs.gtk.org/gio/type_func.Application.id_is_valid.html).
#
# The default is `com.mitchellh.ghostty`.
#
# This only affects GTK builds.
class =

# This controls the instance name field of the `WM_CLASS` X11 property when
# running under X11. It has no effect otherwise.
#
# The default is `ghostty`.
#
# This only affects GTK builds.
x11-instance-name =

# The directory to change to after starting the command.
#
# This setting is secondary to the `window-inherit-working-directory`
# setting. If a previous Ghostty terminal exists in the same process,
# `window-inherit-working-directory` will take precedence. Otherwise, this
# setting will be used. Typically, this setting is used only for the first
# window.
#
# The default is `inherit` except in special scenarios listed next. On macOS,
# if Ghostty can detect it is launched from launchd (double-clicked) or
# `open`, then it defaults to `home`. On Linux with GTK, if Ghostty can detect
# it was launched from a desktop launcher, then it defaults to `home`.
#
# The value of this must be an absolute value or one of the special values
# below:
#
#   * `home` - The home directory of the executing user.
#
#   * `inherit` - The working directory of the launching process.
working-directory =

# Key bindings. The format is `trigger=action`. Duplicate triggers will
# overwrite previously set values.
#
# Trigger: `+`-separated list of keys and modifiers. Example: `ctrl+a`,
# `ctrl+shift+b`, `up`. Some notes:
#
#   * modifiers cannot repeat, `ctrl+ctrl+a` is invalid.
#
#   * modifiers and keys can be in any order, `shift+a+ctrl` is *weird*,
#     but valid.
#
#   * only a single key input is allowed, `ctrl+a+b` is invalid.
#
# Valid modifiers are `shift`, `ctrl` (alias: `control`), `alt` (alias: `opt`,
# `option`), and `super` (alias: `cmd`, `command`). You may use the modifier
# or the alias. When debugging keybinds, the non-aliased modifier will always
# be used in output.
#
# Action is the action to take when the trigger is satisfied. It takes the
# format `action` or `action:param`. The latter form is only valid if the
# action requires a parameter.
#
#   * `ignore` - Do nothing, ignore the key input. This can be used to
#     black hole certain inputs to have no effect.
#
#   * `unbind` - Remove the binding. This makes it so the previous action
#     is removed, and the key will be sent through to the child command
#     if it is printable.
#
#   * `csi:text` - Send a CSI sequence. i.e. `csi:A` sends "cursor up".
#     See: https://aperiodic.net/pip/archives/Geekery/term-function-keys/
#
#   * `esc:text` - Send an escape sequence. i.e. `esc:d` deletes to the
#     end of the word to the right.
#
#   * `text:text` - Send a string. Uses Zig string literal syntax.
#     i.e. `text:\x15` sends Ctrl-U.
#
# Some notes for the action:
#
#   * The parameter is taken as-is after the `:`. Double quotes or
#     other mechanisms are included and NOT parsed. If you want to
#     send a string value that includes spaces, wrap the entire
#     trigger/action in double quotes. Example: `--keybind="up=csi:A B"`
#
# There are some additional special values that can be specified for
# keybind:
#
#   * `keybind=clear` will clear all set keybindings. Warning: this
#     removes ALL keybindings up to this point, including the default
#     keybindings.

# fix alt+key
keybind = alt+one=text:\u{001B}1
keybind = alt+two=text:\u{001B}2
keybind = alt+three=text:\u{001B}3
keybind = alt+four=text:\u{001B}4
keybind = alt+five=text:\u{001B}5
keybind = alt+six=text:\u{001B}6
keybind = alt+seven=text:\u{001B}7
keybind = alt+eight=text:\u{001B}8
keybind = alt+nine=text:\u{001B}9
keybind = alt+zero=text:\u{001B}0
keybind = alt+a=text:\u{001B}a
keybind = alt+b=text:\u{001B}b
keybind = alt+c=text:\u{001B}c
keybind = alt+d=text:\u{001B}d
keybind = alt+e=text:\u{001B}e
keybind = alt+f=text:\u{001B}f
keybind = alt+g=text:\u{001B}g
keybind = alt+h=text:\u{001B}h
keybind = alt+i=text:\u{001B}i
keybind = alt+j=text:\u{001B}j
keybind = alt+k=text:\u{001B}k
keybind = alt+l=text:\u{001B}l
keybind = alt+m=text:\u{001B}m
keybind = alt+n=text:\u{001B}n
keybind = alt+o=text:\u{001B}o
keybind = alt+p=text:\u{001B}p
keybind = alt+q=text:\u{001B}q
keybind = alt+r=text:\u{001B}r
keybind = alt+s=text:\u{001B}s
keybind = alt+t=text:\u{001B}t
keybind = alt+u=text:\u{001B}u
keybind = alt+v=text:\u{001B}v
keybind = alt+w=text:\u{001B}w
keybind = alt+x=text:\u{001B}x
keybind = alt+y=text:\u{001B}y
keybind = alt+z=text:\u{001B}z
keybind = alt+backslash=text:\u{001B}\\
keybind = alt+slash=text:\u{001B}/
keybind = alt+left_bracket=text:\u{001B}[
keybind = alt+right_bracket=text:\u{001B}]

# fix alt+shift+key
keybind = alt+shift+a=text:\u{001B}A
keybind = alt+shift+b=text:\u{001B}B
keybind = alt+shift+c=text:\u{001B}C
keybind = alt+shift+d=text:\u{001B}D
keybind = alt+shift+e=text:\u{001B}E
keybind = alt+shift+f=text:\u{001B}F
keybind = alt+shift+g=text:\u{001B}G
keybind = alt+shift+h=text:\u{001B}H
keybind = alt+shift+i=text:\u{001B}I
keybind = alt+shift+j=text:\u{001B}J
keybind = alt+shift+k=text:\u{001B}K
keybind = alt+shift+l=text:\u{001B}L
keybind = alt+shift+m=text:\u{001B}M
keybind = alt+shift+n=text:\u{001B}N
keybind = alt+shift+o=text:\u{001B}O
keybind = alt+shift+p=text:\u{001B}P
keybind = alt+shift+q=text:\u{001B}Q
keybind = alt+shift+r=text:\u{001B}R
keybind = alt+shift+s=text:\u{001B}S
keybind = alt+shift+t=text:\u{001B}T
keybind = alt+shift+u=text:\u{001B}U
keybind = alt+shift+v=text:\u{001B}V
keybind = alt+shift+w=text:\u{001B}W
keybind = alt+shift+x=text:\u{001B}X
keybind = alt+shift+y=text:\u{001B}Y
keybind = alt+shift+z=text:\u{001B}Z
keybind = alt+shift+left_bracket=text:\u{001B}[
keybind = alt+shift+right_bracket=text:\u{001B}]

# fix ctrl+key
keybind = ctrl+a=text:\u{0001}
keybind = ctrl+b=text:\u{0002}
keybind = ctrl+c=text:\u{0003}
keybind = ctrl+d=text:\u{0004}
keybind = ctrl+e=text:\u{0005}
keybind = ctrl+f=text:\u{0006}
keybind = ctrl+g=text:\u{0007}
keybind = ctrl+h=text:\u{0008}
keybind = ctrl+i=text:\u{0009}
keybind = ctrl+j=text:\u{000A}
keybind = ctrl+k=text:\u{000B}
keybind = ctrl+l=text:\u{000C}
keybind = ctrl+m=text:\u{000D}
keybind = ctrl+n=text:\u{000E}
keybind = ctrl+o=text:\u{000F}
keybind = ctrl+p=text:\u{0010}
keybind = ctrl+q=text:\u{0011}
keybind = ctrl+r=text:\u{0012}
keybind = ctrl+s=text:\u{0013}
keybind = ctrl+t=text:\u{0014}
keybind = ctrl+u=text:\u{0015}
keybind = ctrl+v=text:\u{0016}
keybind = ctrl+w=text:\u{0017}
keybind = ctrl+x=text:\u{0018}
keybind = ctrl+y=text:\u{0019}
keybind = ctrl+z=text:\u{001A}

# fix ctrl+alt+key
# keybind = ctrl+alt+a=text:\u{001B}\u{0001}
# keybind = ctrl+alt+b=text:\u{001B}\u{0002}
# keybind = ctrl+alt+c=text:\u{001B}\u{0003}
# keybind = ctrl+alt+d=text:\u{001B}\u{0004}
# keybind = ctrl+alt+e=text:\u{001B}\u{0005}
# keybind = ctrl+alt+f=text:\u{001B}\u{0006}
# keybind = ctrl+alt+g=text:\u{001B}\u{0007}
# keybind = ctrl+alt+h=text:\u{001B}\u{0008}
# keybind = ctrl+alt+i=text:\u{001B}\u{0009}
# keybind = ctrl+alt+j=text:\u{001B}\u{000A}
# keybind = ctrl+alt+k=text:\u{001B}\u{000B}
# keybind = ctrl+alt+l=text:\u{001B}\u{000C}
# keybind = ctrl+alt+m=text:\u{001B}\u{000D}
# keybind = ctrl+alt+n=text:\u{001B}\u{000E}
# keybind = ctrl+alt+o=text:\u{001B}\u{000F}
# keybind = ctrl+alt+p=text:\u{001B}\u{0010}
# keybind = ctrl+alt+q=text:\u{001B}\u{0011}
# keybind = ctrl+alt+r=text:\u{001B}\u{0012}
# keybind = ctrl+alt+s=text:\u{001B}\u{0013}
# keybind = ctrl+alt+t=text:\u{001B}\u{0014}
# keybind = ctrl+alt+u=text:\u{001B}\u{0015}
# keybind = ctrl+alt+v=text:\u{001B}\u{0016}
# keybind = ctrl+alt+w=text:\u{001B}\u{0017}
# keybind = ctrl+alt+x=text:\u{001B}\u{0018}
# keybind = ctrl+alt+y=text:\u{001B}\u{0019}
# keybind = ctrl+alt+z=text:\u{001B}\u{001A}

# keybind = alt+five=goto_tab:5
# keybind = ctrl+shift+q=quit
# keybind = ctrl+alt+down=goto_split:bottom
# keybind = ctrl+shift+page_down=jump_to_prompt:1
# keybind = alt+seven=goto_tab:7
# keybind = ctrl+shift+w=close_surface
# keybind = alt+f4=close_window
# keybind = alt+three=goto_tab:3
# keybind = ctrl+shift+v=paste_from_clipboard
# keybind = super+ctrl+left_bracket=goto_split:previous
# keybind = ctrl+page_down=next_tab
# keybind = ctrl+alt+up=goto_split:top
# keybind = super+ctrl+shift+up=resize_split:up,10
# keybind = super+ctrl+shift+equal=equalize_splits
# keybind = shift+page_up=scroll_page_up
# keybind = ctrl+shift+page_up=jump_to_prompt:-1
# keybind = alt+one=goto_tab:1
# keybind = alt+six=goto_tab:6
# keybind = shift+home=scroll_to_top
# keybind = alt+four=goto_tab:4
# keybind = alt+eight=goto_tab:8
# keybind = shift+end=scroll_to_bottom
# keybind = ctrl+shift+j=write_scrollback_file
# keybind = ctrl+shift+left=previous_tab
# keybind = super+ctrl+shift+down=resize_split:down,10
# keybind = ctrl+shift+a=select_all
# keybind = ctrl+page_up=previous_tab
# keybind = ctrl+shift+o=new_split:right
# keybind = alt+nine=goto_tab:9
# keybind = super+shift+t=new_tab
# keybind = ctrl+comma=open_config
# keybind = super+ctrl+shift+left=resize_split:left,10
# keybind = ctrl+equal=increase_font_size:1
# keybind = super+ctrl+right_bracket=goto_split:next
# keybind = super+ctrl+shift+right=resize_split:right,10
# keybind = ctrl+alt+right=goto_split:right
# keybind = shift+page_down=scroll_page_down
# keybind = alt+two=goto_tab:2
# keybind = ctrl+shift+right=next_tab
# keybind = ctrl+enter=toggle_fullscreen

keybind = alt+shift+n=new_window
keybind = ctrl+plus=increase_font_size:1
keybind = ctrl+minus=decrease_font_size:1
keybind = ctrl+zero=reset_font_size
keybind = ctrl+shift+r=reload_config

keybind = alt+c=copy_to_clipboard
keybind = alt+v=paste_from_clipboard

# keybind = ctrl+shift+x=new_split:down
# keybind = ctrl+shift+v=new_split:right

# keybind = ctrl+alt+left_bracket=resize_split:left,50
# keybind = ctrl+alt+right_bracket=resize_split:right,50
# keybind = ctrl+alt+shift+left_bracket=resize_split:up,50
# keybind = ctrl+alt+shift+right_bracket=resize_split:down,50
keybind = ctrl+alt+shift+i=inspector:toggle

keybind = ctrl+shift+q=text:\u{FF01}
keybind = ctrl+alt+shift+n=text:\u{FF02}
keybind = ctrl+alt+q=text:\u{FF03}
keybind = ctrl+alt+shift+q=text:\u{FF04}
keybind = ctrl+backslash=text:\u{00F0}
keybind = ctrl+shift+backslash=text:\u{00F1}
keybind = alt+shift+backslash=text:\u{00F2}
keybind = ctrl+alt+shift+backslash=text:\u{00FF}
keybind = ctrl+grave_accent=text:\u{00F3}
keybind = ctrl+shift+w=text:\u{00F4}
keybind = ctrl+shift+f=text:\u{00F5}
keybind = ctrl+shift+t=text:\u{00F6}
keybind = ctrl+shift+a=text:\u{00F7}
keybind = ctrl+apostrophe=text:\u{00F8}
keybind = ctrl+shift+p=csi:11;2~
keybind = ctrl+shift+n=csi:12;2~
keybind = ctrl+shift+period=text:\u{00FA}
keybind = ctrl+period=text:\u{00FB}
keybind = ctrl+shift+o=text:\u{00FC}
keybind = ctrl+shift+i=text:\u{00FD}
# keybind = alt+c=text:\u{00FE}
keybind = ctrl+slash=text:\u{00D4}
keybind = ctrl+alt+slash=text:\u{00D5}
keybind = ctrl+shift+slash=text:\u{00D6}
keybind = alt+shift+slash=text:\u{00D7}
keybind = ctrl+alt+shift+slash=text:\u{00D8}
keybind = alt+space=text:\u{00D9}
keybind = ctrl+alt+shift+s=text:\u{00DA}
keybind = alt+shift+comma=text:\u{00db}
keybind = ctrl+alt+a=text:\u{00dc}
keybind = alt+shift+plus=text:\u{00dd}
keybind = alt+shift+-=text:\u{00de}
keybind = ctrl+alt+shift+plus=text:\u{00df}
keybind = ctrl+alt+shift+-=text:\u{00e0}

keybind = ctrl+enter=csi:24~
keybind = alt+enter=csi:25~
keybind = alt+shift+tab=csi:23;5~
keybind = ctrl+comma=csi:21;5~
keybind = ctrl+alt+shift+j=csi:20;5~
keybind = ctrl+alt+shift+k=csi:19;5~
keybind = ctrl+alt+shift+u=csi:24;2~

# keybind = ctrl+alt+left_bracket=text:\u{00a0}
# keybind = ctrl+alt+right_bracket=text:\u{00a1}
# keybind = ctrl+alt+shift+left_bracket=text:\u{00a2}
# keybind = ctrl+alt+shift+right_bracket=text:\u{00a3}
keybind = ctrl+alt+shift+h=text:\u{00a4}
keybind = ctrl+alt+shift+j=text:\u{00a5}
keybind = ctrl+alt+shift+k=text:\u{00a6}
keybind = ctrl+alt+shift+l=text:\u{00a7}
keybind = ctrl+alt+apostrophe=text:\u{00a8}
keybind = ctrl+alt+semicolon=text:\u{00a9}
keybind = ctrl+alt+shift+apostrophe=text:\u{00b0}
keybind = ctrl+alt+shift+semicolon=text:\u{00b1}
keybind = ctrl+alt+enter=text:\u{00b2}
keybind = ctrl+alt+one=text:\u{00c1}
keybind = ctrl+alt+two=text:\u{00c2}
keybind = ctrl+alt+three=text:\u{00c3}
keybind = ctrl+alt+four=text:\u{00c4}
keybind = ctrl+alt+five=text:\u{00c5}
keybind = ctrl+alt+six=text:\u{00c6}
keybind = ctrl+alt+seven=text:\u{00c7}
keybind = ctrl+alt+eight=text:\u{00c8}
keybind = ctrl+alt+nine=text:\u{00c9}
keybind = ctrl+shift+h=text:\u{00d0}
keybind = ctrl+shift+j=text:\u{00d1}
keybind = ctrl+shift+k=text:\u{00d2}
keybind = ctrl+shift+l=text:\u{00d3}
keybind = shift+enter=text:\n

# Window padding. This applies padding between the terminal cells and the
# window border. The `x` option applies to the left and right padding and the
# `y` option is top and bottom. The value is in points, meaning that it will
# be scaled appropriately for screen DPI.
#
# If this value is set too large, the screen will render nothing, because the
# grid will be completely squished by the padding. It is up to you as the user
# to pick a reasonable value. If you pick an unreasonable value, a warning
# will appear in the logs.
#
# Changing these values will only apply after restart.
window-padding-x = 10

window-padding-y = 8
# The viewport dimensions are usually not perfectly divisible by the cell
# size. In this case, some extra padding on the end of a column and the bottom
# of the final row may exist. If this is `true`, then this extra padding
# is automatically balanced between all four edges to minimize imbalance on
# one side. If this is `false`, the top left grid cell will always hug the
# edge with zero padding other than what may be specified with the other
# `window-padding` options.
#
# If other `window-padding` fields are set and this is `true`, this will still
# apply. The other padding is applied first and may affect how many grid cells
# actually exist, and this is applied last in order to balance the padding
# given a certain viewport size and grid cell size.
window-padding-balance = true

# The color of the padding area of the window. Valid values are:
#
# * `background` - The background color specified in `background`.
# * `extend` - Extend the background color of the nearest grid cell.
# * `extend-always` - Same as "extend" but always extends without applying
#   any of the heuristics that disable extending noted below.
#
# The "extend" value will be disabled in certain scenarios. On primary
# screen applications (i.e. not something like Neovim), the color will not
# be extended vertically if any of the following are true:
#
# * The nearest row has any cells that have the default background color.
#   The thinking is that in this case, the default background color looks
#   fine as a padding color.
# * The nearest row is a prompt row (requires shell integration). The
#   thinking here is that prompts often contain powerline glyphs that
#   do not look good extended.
# * The nearest row contains a perfect fit powerline character. These
#   don't look good extended.
#
window-padding-color = background

# Synchronize rendering with the screen refresh rate. If true, this will
# minimize tearing and align redraws with the screen but may cause input
# latency. If false, this will maximize redraw frequency but may cause tearing,
# and under heavy load may use more CPU and power.
#
# This defaults to true because out-of-sync rendering on macOS can
# cause kernel panics (macOS 14.4+) and performance issues for external
# displays over some hardware such as DisplayLink. If you want to maximize
# input latency, set this to false with the known aforementioned risks.
#
# Changing this value at runtime will only affect new terminals.
#
# This setting is only supported currently on macOS.
window-vsync = false

# If true, new windows and tabs will inherit the working directory of the
# previously focused window. If no window was previously focused, the default
# working directory will be used (the `working-directory` option).
window-inherit-working-directory = true

# If true, new windows and tabs will inherit the font size of the previously
# focused window. If no window was previously focused, the default font size
# will be used. If this is false, the default font size specified in the
# configuration `font-size` will be used.
window-inherit-font-size = false

# If false, windows won't have native decorations, i.e. titlebar and
# borders.
window-decoration = true

# The font that will be used for the application's window and tab titles.
#
# This is currently only supported on macOS.
window-title-font-family =

# The theme to use for the windows. Valid values:
#
#   * `auto` - Determine the theme based on the configured terminal
#      background color.
#   * `system` - Use the system theme.
#   * `light` - Use the light theme regardless of system theme.
#   * `dark` - Use the dark theme regardless of system theme.
#
# On macOS, if `macos-titlebar-style` is "tabs", the window theme will be
# automatically set based on the luminosity of the terminal background color.
# This only applies to terminal windows. This setting will still apply to
# non-terminal windows within Ghostty.
#
# This is currently only supported on macOS and Linux.
window-theme = auto

# The colorspace to use for the terminal window. The default is `srgb` but
# this can also be set to `display-p3` to use the Display P3 colorspace.
#
# Changing this value at runtime will only affect new windows.
#
# This setting is only supported on macOS.
window-colorspace = srgb

# The initial window size. This size is in terminal grid cells by default.
#
# We don't currently support specifying a size in pixels but a future change
# can enable that. If this isn't specified, the app runtime will determine
# some default size.
#
# Note that the window manager may put limits on the size or override the
# size. For example, a tiling window manager may force the window to be a
# certain size to fit within the grid. There is nothing Ghostty will do about
# this, but it will make an effort.
#
# This will not affect new tabs, splits, or other nested terminal elements.
# This only affects the initial window size of any new window. Changing this
# value will not affect the size of the window after it has been created. This
# is only used for the initial size.
#
# BUG: On Linux with GTK, the calculated window size will not properly take
# into account window decorations. As a result, the grid dimensions will not
# exactly match this configuration. If window decorations are disabled (see
# window-decorations), then this will work as expected.
#
# Windows smaller than 10 wide by 4 high are not allowed.
window-height = 0

window-width = 0
# Whether to enable saving and restoring window state. Window state includes
# their position, size, tabs, splits, etc. Some window state requires shell
# integration, such as preserving working directories. See `shell-integration`
# for more information.
#
# There are three valid values for this configuration:
#
#   * `default` will use the default system behavior. On macOS, this
#     will only save state if the application is forcibly terminated
#     or if it is configured systemwide via Settings.app.
#
#   * `never` will never save window state.
#
#   * `always` will always save window state whenever Ghostty is exited.
#
# If you change this value to `never` while Ghostty is not running, the next
# Ghostty launch will NOT restore the window state.
#
# If you change this value to `default` while Ghostty is not running and the
# previous exit saved state, the next Ghostty launch will still restore the
# window state. This is because Ghostty cannot know if the previous exit was
# due to a forced save or not (macOS doesn't provide this information).
#
# If you change this value so that window state is saved while Ghostty is not
# running, the previous window state will not be restored because Ghostty only
# saves state on exit if this is enabled.
#
# The default value is `default`.
#
# This is currently only supported on macOS. This has no effect on Linux.
window-save-state = default

# Resize the window in discrete increments of the focused surface's cell size.
# If this is disabled, surfaces are resized in pixel increments. Currently
# only supported on macOS.
window-step-resize = false

# The position where new tabs are created. Valid values:
#
#   * `current` - Insert the new tab after the currently focused tab,
#     or at the end if there are no focused tabs.
#
#   * `end` - Insert the new tab at the end of the tab list.
#
# This configuration currently only works with GTK.
window-new-tab-position = current

# When enabled, the full GTK titlebar is displayed instead of your window
# manager's simple titlebar. The behavior of this option will vary with your
# window manager.
#
# This option does nothing when `window-decoration` is false or when running
# under macOS.
#
# Changing this value at runtime and reloading the configuration will only
# affect new windows.
gtk-titlebar = false

# Whether to allow programs running in the terminal to read/write to the
# system clipboard (OSC 52, for googling). The default is to allow clipboard
# reading after prompting the user and allow writing unconditionally.
clipboard-read = ask

clipboard-write = allow
# Trims trailing whitespace on data that is copied to the clipboard. This does
# not affect data sent to the clipboard via `clipboard-write`.
clipboard-trim-trailing-spaces = false

# Require confirmation before pasting text that appears unsafe. This helps
# prevent a "copy/paste attack" where a user may accidentally execute unsafe
# commands by pasting text with newlines.
clipboard-paste-protection = true

# If true, bracketed pastes will be considered safe. By default, bracketed
# pastes are considered safe. "Bracketed" pastes are pastes while the running
# program has bracketed paste mode enabled (a setting set by the running
# program, not the terminal emulator).
clipboard-paste-bracketed-safe = true

# Enables or disabled title reporting (CSI 21 t). This escape sequence
# allows the running program to query the terminal title. This is a common
# security issue and is disabled by default.
#
# Warning: This can expose sensitive information at best and enable
# arbitrary code execution at worst (with a maliciously crafted title
# and a minor amount of user interaction).
title-report = false

# The total amount of bytes that can be used for image data (i.e. the Kitty
# image protocol) per terminal scren. The maximum value is 4,294,967,295
# (4GiB). The default is 320MB. If this is set to zero, then all image
# protocols will be disabled.
#
# This value is separate for primary and alternate screens so the effective
# limit per surface is double.
image-storage-limit = 320000000

# Whether to automatically copy selected text to the clipboard. `true` will
# only copy on systems that support a selection clipboard.
#
# The value `clipboard` will copy to the system clipboard, making this work on
# macOS. Note that middle-click will also paste from the system clipboard in
# this case.
#
# Note that if this is disabled, middle-click paste will also be disabled.
copy-on-select = true

# The time in milliseconds between clicks to consider a click a repeat
# (double, triple, etc.) or an entirely new single click. A value of zero will
# use a platform-specific default. The default on macOS is determined by the
# OS settings. On every other platform it is 500ms.
click-repeat-interval = 0

# Additional configuration files to read. This configuration can be repeated
# to read multiple configuration files. Configuration files themselves can
# load more configuration files. Paths are relative to the file containing the
# `config-file` directive. For command-line arguments, paths are relative to
# the current working directory.
#
# Cycles are not allowed. If a cycle is detected, an error will be logged and
# the configuration file will be ignored.
config-file =

# Confirms that a surface should be closed before closing it. This defaults to
# true. If set to false, surfaces will close without any confirmation.
confirm-close-surface = true

# Whether or not to quit after the last window is closed. This defaults to
# false. Currently only supported on macOS. On Linux, the process always exits
# after the last window is closed.
quit-after-last-window-closed = false

# Whether to enable shell integration auto-injection or not. Shell integration
# greatly enhances the terminal experience by enabling a number of features:
#
#   * Working directory reporting so new tabs, splits inherit the
#     previous terminal's working directory.
#
#   * Prompt marking that enables the "jump_to_prompt" keybinding.
#
#   * If you're sitting at a prompt, closing a terminal will not ask
#     for confirmation.
#
#   * Resizing the window with a complex prompt usually paints much
#     better.
#
# Allowable values are:
#
#   * `none` - Do not do any automatic injection. You can still manually
#     configure your shell to enable the integration.
#
#   * `detect` - Detect the shell based on the filename.
#
#   * `bash`, `elvish`, `fish`, `zsh` - Use this specific shell injection scheme.
#
# The default value is `detect`.
shell-integration = detect

# Shell integration features to enable if shell integration itself is enabled.
# The format of this is a list of features to enable separated by commas. If
# you prefix a feature with `no-` then it is disabled. If you omit a feature,
# its default value is used, so you must explicitly disable features you don't
# want.
#
# Available features:
#
#   * `cursor` - Set the cursor to a blinking bar at the prompt.
#
#   * `sudo` - Set sudo wrapper to preserve terminfo.
#
#   * `title` - Set the window title via shell integration.
#
# Example: `cursor`, `no-cursor`, `sudo`, `no-sudo`, `title`, `no-title`
shell-integration-features = cursor,sudo,no-title

# Sets the reporting format for OSC sequences that request color information.
# Ghostty currently supports OSC 10 (foreground), OSC 11 (background), and
# OSC 4 (256 color palette) queries, and by default the reported values
# are scaled-up RGB values, where each component are 16 bits. This is how
# most terminals report these values. However, some legacy applications may
# require 8-bit, unscaled, components. We also support turning off reporting
# alltogether. The components are lowercase hex values.
#
# Allowable values are:
#
#   * `none` - OSC 4/10/11 queries receive no reply
#
#   * `8-bit` - Color components are return unscaled, i.e. `rr/gg/bb`
#
#   * `16-bit` - Color components are returned scaled, e.g. `rrrr/gggg/bbbb`
#
# The default value is `16-bit`.
osc-color-report-format = 16-bit

# If true, allows the "KAM" mode (ANSI mode 2) to be used within
# the terminal. KAM disables keyboard input at the request of the
# application. This is not a common feature and is not recommended
# to be enabled. This will not be documented further because
# if you know you need KAM, you know. If you don't know if you
# need KAM, you don't need it.
vt-kam-allowed = false

# Custom shaders to run after the default shaders. This is a file path
# to a GLSL-syntax shader for all platforms.
#
# WARNING: Invalid shaders can cause Ghostty to become unusable such as by
# causing the window to be completely black. If this happens, you can
# unset this configuration to disable the shader.
#
# On Linux, this requires OpenGL 4.2. Ghostty typically only requires
# OpenGL 3.3, but custom shaders push that requirement up to 4.2.
#
# The shader API is identical to the Shadertoy API: you specify a `mainImage`
# function and the available uniforms match Shadertoy. The iChannel0 uniform
# is a texture containing the rendered terminal screen.
#
# If the shader fails to compile, the shader will be ignored. Any errors
# related to shader compilation will not show up as configuration errors
# and only show up in the log, since shader compilation happens after
# configuration loading on the dedicated render thread.  For interactive
# development, use [shadertoy.com](https://shadertoy.com).
#
# This can be repeated multiple times to load multiple shaders. The shaders
# will be run in the order they are specified.
#
# Changing this value at runtime and reloading the configuration will only
# affect new windows, tabs, and splits.
# custom-shader = ./shaders/anxiety.glsl

# If `true` (default), the focused terminal surface will run an animation
# loop when custom shaders are used. This uses slightly more CPU (generally
# less than 10%) but allows the shader to animate. This only runs if there
# are custom shaders and the terminal is focused.
#
# If this is set to `false`, the terminal and custom shader will only render
# when the terminal is updated. This is more efficient but the shader will
# not animate.
#
# This can also be set to `always`, which will always run the animation
# loop regardless of whether the terminal is focused or not. The animation
# loop will still only run when custom shaders are used. Note that this
# will use more CPU per terminal surface and can become quite expensive
# depending on the shader and your terminal usage.
#
# This value can be changed at runtime and will affect all currently
# open terminals.
custom-shader-animation = true

# If anything other than false, fullscreen mode on macOS will not use the
# native fullscreen, but make the window fullscreen without animations and
# using a new space. It's faster than the native fullscreen mode since it
# doesn't use animations.
#
# Warning: tabs do not work with a non-native fullscreen window. This
# can be fixed but is looking for contributors to help. See issue #392.
#
# Allowable values are:
#
#   * `visible-menu` - Use non-native macOS fullscreen, keep the menu bar visible
#   * `true` - Use non-native macOS fullscreen, hide the menu bar
#   * `false` - Use native macOS fullscreeen
#
macos-non-native-fullscreen = true

# The style of the macOS titlebar. Available values are: "native",
# "transparent", and "tabs".
#
# The "native" style uses the native macOS titlebar with zero customization.
# The titlebar will match your window theme (see `window-theme`).
#
# The "transparent" style is the same as "native" but the titlebar will
# be transparent and allow your window background color to come through.
# This makes a more seamless window appearance but looks a little less
# typical for a macOS application and may not work well with all themes.
#
# The "tabs" style is a completely custom titlebar that integrates the
# tab bar into the titlebar. This titlebar always matches the background
# color of the terminal. There are some limitations to this style:
# On macOS 13 and below, saved window state will not restore tabs correctly.
# macOS 14 does not have this issue and any other macOS version has not
# been tested.
#
# The default value is "transparent". This is an opinionated choice
# but its one I think is the most aesthetically pleasing and works in
# most cases.
#
# Changing this option at runtime only applies to new windows.
macos-titlebar-style = transparent

# If `true`, the *Option* key will be treated as *Alt*. This makes terminal
# sequences expecting *Alt* to work properly, but will break Unicode input
# sequences on macOS if you use them via the *Alt* key. You may set this to
# `false` to restore the macOS *Alt* key unicode sequences but this will break
# terminal sequences expecting *Alt* to work.
#
# Note that if an *Option*-sequence doesn't produce a printable character, it
# will be treated as *Alt* regardless of this setting. (i.e. `alt+ctrl+a`).
#
# This does not work with GLFW builds.
macos-option-as-alt = false

# Whether to enable the macOS window shadow. The default value is true.
# With some window managers and window transparency settings, you may
# find false more visually appealing.
macos-window-shadow = true

# Put every surface (tab, split, window) into a dedicated Linux cgroup.
#
# This makes it so that resource management can be done on a per-surface
# granularity. For example, if a shell program is using too much memory,
# only that shell will be killed by the oom monitor instead of the entire
# Ghostty process. Similarly, if a shell program is using too much CPU,
# only that surface will be CPU-throttled.
#
# This will cause startup times to be slower (a hundred milliseconds or so),
# so the default value is "single-instance." In single-instance mode, only
# one instance of Ghostty is running (see gtk-single-instance) so the startup
# time is a one-time cost. Additionally, single instance Ghostty is much
# more likely to have many windows, tabs, etc. so cgroup isolation is a
# big benefit.
#
# This feature requires systemd. If systemd is unavailable, cgroup
# initialization will fail. By default, this will not prevent Ghostty
# from working (see linux-cgroup-hard-fail).
#
# Valid values are:
#
#   * `never` - Never use cgroups.
#   * `always` - Always use cgroups.
#   * `single-instance` - Enable cgroups only for Ghostty instances launched
#     as single-instance applications (see gtk-single-instance).
#
linux-cgroup = single-instance

# Memory limit for any individual terminal process (tab, split, window,
# etc.) in bytes. If this is unset then no memory limit will be set.
#
# Note that this sets the "memory.high" configuration for the memory
# controller, which is a soft limit. You should configure something like
# systemd-oom to handle killing processes that have too much memory
# pressure.
linux-cgroup-memory-limit =

# If this is false, then any cgroup initialization (for linux-cgroup)
# will be allowed to fail and the failure is ignored. This is useful if
# you view cgroup isolation as a "nice to have" and not a critical resource
# management feature, because Ghostty startup will not fail if cgroup APIs
# fail.
#
# If this is true, then any cgroup initialization failure will cause
# Ghostty to exit or new surfaces to not be created.
#
# Note: this currently only affects cgroup initialization. Subprocesses
# must always be able to move themselves into an isolated cgroup.
linux-cgroup-hard-fail = false

# If true, the Ghostty GTK application will run in single-instance mode:
# each new `ghostty` process launched will result in a new window if there
# is already a running process.
#
# If false, each new ghostty process will launch a separate application.
#
# The default value is `desktop` which will default to `true` if Ghostty
# detects it was launched from the `.desktop` file such as an app launcher.
# If Ghostty is launched from the command line, it will default to `false`.
#
# Note that debug builds of Ghostty have a separate single-instance ID
# so you can test single instance without conflicting with release builds.
gtk-single-instance = false

# Determines the side of the screen that the GTK tab bar will stick to.
# Top, bottom, left, and right are supported. The default is top.
gtk-tabs-location = top

# If `true` (default), then the Ghostty GTK tabs will be "wide." Wide tabs
# are the new typical Gnome style where tabs fill their available space.
# If you set this to `false` then tabs will only take up space they need,
# which is the old style.
gtk-wide-tabs = true

# If `true` (default), Ghostty will enable libadwaita theme support. This
# will make `window-theme` work properly and will also allow Ghostty to
# properly respond to system theme changes, light/dark mode changing, etc.
# This requires a GTK4 desktop with a GTK4 theme.
#
# If you are running GTK3 or have a GTK3 theme, you may have to set this
# to false to get your theme picked up properly. Having this set to true
# with GTK3 should not cause any problems, but it may not work exactly as
# expected.
#
# This configuration only has an effect if Ghostty was built with
# libadwaita support.
# gtk-adwaita = true

# If `true` (default), applications running in the terminal can show desktop
# notifications using certain escape sequences such as OSC 9 or OSC 777.
desktop-notifications = true

# If `true`, the bold text will use the bright color palette.
bold-is-bright = true

# This will be used to set the `TERM` environment variable.
# HACK: We set this with an `xterm` prefix because vim uses that to enable key
# protocols (specifically this will enable `modifyOtherKeys`), among other
# features. An option exists in vim to modify this: `:set
# keyprotocol=ghostty:kitty`, however a bug in the implementation prevents it
# from working properly. https://github.com/vim/vim/pull/13211 fixes this.
term = xterm-ghostty

# String to send when we receive `ENQ` (`0x05`) from the command that we are
# running. Defaults to an empty string if not set.
enquiry-response =

# vim: set ft=dosini commentstring=#\ %s:
